**Agent Objective**: Build "ChiliZ eSports Hub" Web3 dApp prototype on Chiliz Spicy Testnet.

**Product Overview**:
ChiliZ eSports Hub is a comprehensive Web3 ecosystem for eSports fans featuring:
- Prediction markets for match betting using CHZ tokens
- Fan Token DAO governance for team decisions
- Skill video showcase with IPFS storage and CHZ rewards
- NFT course marketplace for pro player tutorials
- Virtual merchandise trading platform

**Architecture**:
- 5 Smart Contracts: PredictionMarket, FanTokenDAO, SkillShowcase, CourseNFT, Marketplace
- Next.js frontend with gaming theme (purple/cyan gradients, dark background #0A0618)
- Node.js + Socket.io backend for real-time blockchain events
- **IPFS Storage: NFT.Storage ONLY** (free unlimited storage, no credit card needed)
- Admin wallet: 0x0734EdcC126a08375a08C02c3117d44B24dF47Fa

**Smart Contract Functions Brief**:

**1. PredictionMarket.sol**:
- `createEvent(name, ipfsHash, endTime)` - Admin creates betting event
- `placeBet(eventId, option)` payable - Users bet CHZ on outcomes
- `resolveEvent(eventId, winningOption)` - Admin resolves with winner
- `withdrawWinnings(eventId)` - Winners claim CHZ payouts
- Events: EventCreated, BetPlaced, EventResolved

**2. FanTokenDAO.sol**:
- `mint(to, amount)` - Issue fan tokens to users
- `createProposal(description)` - Submit governance proposal
- `vote(proposalId, support)` - Vote using token balance weight
- `executeProposal(proposalId)` - Execute passed proposals
- Events: ProposalCreated, VoteCast, ProposalExecuted

**3. SkillShowcase.sol**:
- `uploadVideo(ipfsHash, title, category)` - Store video metadata, reward 0.01 CHZ
- `likeVideo(videoId)` - Like videos (affects ranking)
- `verifyVideo(videoId)` - Admin verification adds bonus reward
- `claimRewards()` - Creators withdraw earned CHZ
- Events: VideoUploaded, VideoLiked, RewardClaimed

**4. CourseNFT.sol**:
- `lazyMint(uri, price)` - Pro players create course NFTs
- `purchase(tokenId)` payable - Buy course with CHZ
- `setRoyalty(percentage)` - Creator royalty settings
- Events: CourseMinted, CoursePurchased

**5. Marketplace.sol**:
- `listItem(tokenId, price)` - List NFT/virtual item for sale
- `buyItem(itemId)` payable - Purchase with CHZ
- `updatePrice(itemId, newPrice)` - Seller updates price
- Events: ItemListed, ItemSold, PriceUpdated

**API Documentation**:

**REST Endpoints**:
- POST `/api/bet` - Body: {eventId: uint256, option: uint8, amount: string} - Place bet via thirdweb SDK
- GET `/api/events` - Fetch all betting events with odds and status from PredictionMarket
- POST `/api/video/upload` - FormData with video + metadata - Upload to NFT.Storage + blockchain
- GET `/api/videos` - Retrieve video list with IPFS hashes from SkillShowcase
- POST `/api/dao/proposal` - Body: {description: string} - Create DAO proposal
- POST `/api/dao/vote` - Body: {proposalId: uint256, support: bool} - Cast DAO vote
- GET `/api/dao/proposals` - Fetch active proposals and vote counts
- POST `/api/marketplace/list` - Body: {itemId: uint256, price: string} - List marketplace item
- POST `/api/marketplace/buy` - Body: {itemId: uint256} - Purchase marketplace item

**WebSocket Events** (Real-time Updates):
- `bet:placed` - {eventId, bettor, amount} - New bet placed, update odds
- `video:new` - {id, creator, ipfsHash} - New video uploaded
- `dao:newProposal` - {id, description} - New governance proposal
- `dao:voteUpdate` - {proposalId, votesFor, votesAgainst} - Live vote counts
- `marketplace:itemListed` - {itemId, seller, price} - New item for sale
- `marketplace:itemSold` - {itemId, buyer, price} - Item purchased

**IPFS Integration** (NFT.Storage Only):
- Install: `npm install nft.storage`
- API Key: NFT_STORAGE_KEY (free from https://nft.storage)
- Upload: `client.store(file, metadata)` - Returns ipfs:// URL
- Display: `ipfsUrl.replace('ipfs://', 'https://nftstorage.link/ipfs/')`
- Supports: Videos, images, JSON metadata - unlimited free storage

**Deployment Process**:
1. Setup foundry.toml with Chiliz RPC: https://spicy-rpc.chiliz.com/
2. Deploy: `npx thirdweb deploy -k $THIRDWEB_SECRET_KEY`
3. Dashboard opens â†’ Select "Chiliz Spicy Testnet"
4. Use admin address 0x0734EdcC126a08375a08C02c3117d44B24dF47Fa for constructor
5. Auto-update constants/addresses.ts with deployed contract addresses

**Environment Variables** (Replit Secrets):
```
THIRDWEB_SECRET_KEY=your_thirdweb_secret_key
NFT_STORAGE_KEY=your_nft_storage_api_key  
ADMIN_PRIVATE_KEY=your_admin_wallet_private_key
```

**Gas Optimization**: 
- All transactions < 0.002 CHZ
- Min bet: 0.001 CHZ
- Video upload reward: 0.01 CHZ  
- Course prices: 0.1 CHZ
- Use uint256 for gas efficiency

**UI Design Requirements**:
- Dark theme: Background #0A0618
- Gradients: linear-gradient(135deg, #6322FF 0%, #FF0EF5 100%)
- Accent color: #00FFE0 (cyan)
- Text: #F0F4FF (light)
- Hover effects: scale(1.03) with colored shadows
- Modern gaming aesthetic inspired by Entropia theme

**Frontend Pages Structure**:
1. `/` - Live betting odds grid with neon cards
2. `/market/[id]` - Bet placement modal with real-time odds
3. `/dao` - Proposal list with voting interface
4. `/videos` - Upload form + video gallery with IPFS playback
5. `/profile` - CHZ balance, betting history, video rewards

**Real-time Features**:
- WebSocket server on port 4000
- Live betting odds updates
- Instant vote count changes
- New video notifications
- Marketplace activity feed

**MVP Priority Order**:
1. PredictionMarket (Core betting functionality)
2. SkillShowcase (Video upload with IPFS)
3. FanTokenDAO (Governance voting)
4. Marketplace (NFT trading)
5. CourseNFT (Educational content)

**Deliverables**:
- All 5 contracts deployed and verified on Chiliz Spicy testnet
- Working video upload/playback via NFT.Storage
- Real-time betting interface with WebSocket updates
- DAO governance with token-weighted voting
- Complete modern gaming UI prototype ready for demo

**Success Metrics**:
- Video upload to IPFS < 30 seconds
- Bet placement gas cost < 0.002 CHZ
- Real-time updates < 2 second latency
- All contract functions working with admin permissions

Build the complete dApp with all MVP features. Use NFT.Storage for ALL file storage needs.
